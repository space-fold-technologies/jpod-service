ContainerDetails details{};
  details.id = std::string("0c04521a-762d-49d9-88c4-0aaf4806df82");
  details.host = "floofy";
  details.os = "linux";
  details.variant = "alpine";
  details.version = "latest";
  details.entry_point = std::string("top");
  details.path = std::string("/zroot/containers/pod-0c04521a-762d-49d9-88c4-0aaf4806df82");
  details.parameters.try_emplace("persist", "");
  details.parameters.try_emplace("allow.raw_sockets", "");
  details.parameters.try_emplace("allow.mount", "");
  details.parameters.try_emplace("allow.mount.devfs", "");
  details.parameters.try_emplace("allow.mount.procfs", "");
  details.parameters.try_emplace("allow.mount.linprocfs", "");
  details.parameters.try_emplace("allow.mount.linsysfs", "");
  details.parameters.try_emplace("allow.mount.tmpfs", "");
  details.parameters.try_emplace("securelevel", "3");
  details.parameters.try_emplace("devfs_ruleset", "4");
  details.env_vars.try_emplace("JAVA_HOME", "nuts");
  details.env_vars.try_emplace("SWIFT_HOME", "mega");
  //details.username = "root";
  details.mount_points.push_back(MountPoint{"devfs", "dev", "rw", 0});
  details.mount_points.push_back(MountPoint{"linprocfs", "proc", "rw", 0});
  details.mount_points.push_back(MountPoint{"linsysfs", "sys", "rw", 0});
  details.mount_points.push_back(MountPoint{"tmpfs", "dev/shm", "rw,mode=1777", 0});
  runtime.add_container(details);


  auto client = std::make_shared<http::AsioClient>(context);
  // auto request = http::Request::builder()
  //                    .address("http://127.0.0.1:8000/things")
  //                    .get()
  //                    .build();
  // if (request.has_value())
  // {
  //   client->execute(
  //       request.value(),
  //       [console](const http::Response &response)
  //       {
  //         console->info("STATUS CODE: {}", response.status_code);
  //         console->info("CONTENT-LENGTH: {}", response.content_length());
  //         console->info("CONTENT-TYPE: {}", response.content_type());
  //         console->info("CONTENT     : {}", std::string(response.data.begin(), response.data.end()));
  //       });
  // }
  std::shared_ptr<http::Destination> destination = std::make_shared<http::FileDestination>("/home/william/tests/bunny.mp4");
  client->download("http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4", destination, [console](const http::Status &status){
     console->info("progress : {}/{}", status.current, status.total);
  });